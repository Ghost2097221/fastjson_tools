package com.fastjsontool.exploit.request;

import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.message.BasicNameValuePair;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class HTTPRequest extends Request {
    public HTTPRequest() {
        super();
    }


    public CloseableHttpResponse sendJson(String url, String json, String cmd) {
        if (!url.equals("") && !json.equals("")) {
            try {
                CloseableHttpClient client = creatHttpClient(url);
                HttpPost httpPost = new HttpPost(url);
                httpPost = setHeaders(httpPost);
                httpPost.setHeader("X-FORWARDEDS-FOR",cmd);

                StringEntity stringEntity = new StringEntity(json, "UTF-8");
                stringEntity.setContentEncoding("UTF-8");
                stringEntity.setContentType("application/json");
                httpPost.setEntity(stringEntity);
                return client.execute(httpPost);
            } catch (Exception e) {
                return null;
            }
        }
        return null;
    }

    /**
     * 发送post请求
     *
     * @param url
     * @param params
     * @return
     */
    public CloseableHttpResponse sendPost(String url, Map<String, Object> params) {
        if (!url.equals("") && params.size() > 0) {
            try {
                CloseableHttpClient client = creatHttpClient(url);
                HttpPost httpPost = new HttpPost(url);
                setHeaders(httpPost);

                List<NameValuePair> pairList = new ArrayList<>(params.size());
                for (Map.Entry<String, Object> entry : params.entrySet()) {
                    NameValuePair pair = new BasicNameValuePair(entry.getKey(), entry.getValue().toString());
                    pairList.add(pair);
                }
                httpPost.setEntity(new UrlEncodedFormEntity(pairList, Charset.forName("UTF-8")));
                return client.execute(httpPost);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        return null;
    }

    /**
     * 发送get请求
     *
     * @param url
     * @param params
     * @return
     */
    public CloseableHttpResponse sendGet(String url, Map<String, Object> params) {
        if (!url.equals("")) {
            try {
                url = getParamHandle(url, params);
                CloseableHttpClient client = creatHttpClient(url);
                HttpGet httpGet = new HttpGet(url);
                setHeaders(httpGet);
                return client.execute(httpGet);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    private HttpPost setHeaders(HttpPost post) {
        post.setConfig(requestConfig);
        //httpPost.setHeader("Content-Type", "application/json;charset=UTF-8");
        Iterator<String> iterator = super.headers.keySet().iterator();
        while (iterator.hasNext()) {
            String key = iterator.next();
            post.setHeader(key, super.headers.get(key));
        }
        return post;
    }
    private HttpGet setHeaders(HttpGet get) {
        get.setConfig(requestConfig);
        //httpPost.setHeader("Content-Type", "application/json;charset=UTF-8");
        Iterator<String> iterator = super.headers.keySet().iterator();
        while (iterator.hasNext()) {
            String key = iterator.next();
            get.setHeader(key, super.headers.get(key));
        }
        return get;
    }


    private String getParamHandle(String url, Map<String, Object> params) {
        String finalUrl = url;
        try {
            if (params.size() > 0) {
                StringBuffer param = new StringBuffer();
                Iterator<String> iterator = params.keySet().iterator();
                for (int i = 0; iterator.hasNext(); i++) {
                    String key = iterator.next();
                    if (i == 0) {
                        param.append("?");
                    } else {
                        param.append("&");
                    }
                    param.append(key).append("=").append(params.get(key));
                }
                finalUrl += param;
            }
        } catch (Exception e) {
            return finalUrl;
        }
        return finalUrl;
    }
}
